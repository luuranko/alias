{"ast":null,"code":"/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('socket.io-parser');\nvar json = require('json3');\nvar isArray = require('isarray');\nvar Emitter = require('component-emitter');\nvar binary = require('./binary');\nvar isBuf = require('./is-buffer');\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol = 4;\n\n/**\n * Packet types.\n *\n * @api public\n */\n\nexports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'BINARY_EVENT', 'ACK', 'BINARY_ACK', 'ERROR'];\n\n/**\n * Packet type `connect`.\n *\n * @api public\n */\n\nexports.CONNECT = 0;\n\n/**\n * Packet type `disconnect`.\n *\n * @api public\n */\n\nexports.DISCONNECT = 1;\n\n/**\n * Packet type `event`.\n *\n * @api public\n */\n\nexports.EVENT = 2;\n\n/**\n * Packet type `ack`.\n *\n * @api public\n */\n\nexports.ACK = 3;\n\n/**\n * Packet type `error`.\n *\n * @api public\n */\n\nexports.ERROR = 4;\n\n/**\n * Packet type 'binary event'\n *\n * @api public\n */\n\nexports.BINARY_EVENT = 5;\n\n/**\n * Packet type `binary ack`. For acks with binary arguments.\n *\n * @api public\n */\n\nexports.BINARY_ACK = 6;\n\n/**\n * Encoder constructor.\n *\n * @api public\n */\n\nexports.Encoder = Encoder;\n\n/**\n * Decoder constructor.\n *\n * @api public\n */\n\nexports.Decoder = Decoder;\n\n/**\n * A socket.io Encoder instance\n *\n * @api public\n */\n\nfunction Encoder() {}\n\n/**\n * Encode a packet as a single string if non-binary, or as a\n * buffer sequence, depending on packet type.\n *\n * @param {Object} obj - packet object\n * @param {Function} callback - function to handle encodings (likely engine.write)\n * @return Calls callback with Array of encodings\n * @api public\n */\n\nEncoder.prototype.encode = function (obj, callback) {\n  debug('encoding packet %j', obj);\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n    encodeAsBinary(obj, callback);\n  } else {\n    var encoding = encodeAsString(obj);\n    callback([encoding]);\n  }\n};\n\n/**\n * Encode packet as string.\n *\n * @param {Object} packet\n * @return {String} encoded\n * @api private\n */\n\nfunction encodeAsString(obj) {\n  var str = '';\n  var nsp = false;\n\n  // first is type\n  str += obj.type;\n\n  // attachments if we have them\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n    str += obj.attachments;\n    str += '-';\n  }\n\n  // if we have a namespace other than `/`\n  // we append it followed by a comma `,`\n  if (obj.nsp && '/' != obj.nsp) {\n    nsp = true;\n    str += obj.nsp;\n  }\n\n  // immediately followed by the id\n  if (null != obj.id) {\n    if (nsp) {\n      str += ',';\n      nsp = false;\n    }\n    str += obj.id;\n  }\n\n  // json data\n  if (null != obj.data) {\n    if (nsp) str += ',';\n    str += json.stringify(obj.data);\n  }\n  debug('encoded %j as %s', obj, str);\n  return str;\n}\n\n/**\n * Encode packet as 'buffer sequence' by removing blobs, and\n * deconstructing packet into object with placeholders and\n * a list of buffers.\n *\n * @param {Object} packet\n * @return {Buffer} encoded\n * @api private\n */\n\nfunction encodeAsBinary(obj, callback) {\n  function writeEncoding(bloblessData) {\n    var deconstruction = binary.deconstructPacket(bloblessData);\n    var pack = encodeAsString(deconstruction.packet);\n    var buffers = deconstruction.buffers;\n    buffers.unshift(pack); // add packet info to beginning of data list\n    callback(buffers); // write all the buffers\n  }\n\n  binary.removeBlobs(obj, writeEncoding);\n}\n\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n * @api public\n */\n\nfunction Decoder() {\n  this.reconstructor = null;\n}\n\n/**\n * Mix in `Emitter` with Decoder.\n */\n\nEmitter(Decoder.prototype);\n\n/**\n * Decodes an ecoded packet string into packet JSON.\n *\n * @param {String} obj - encoded packet\n * @return {Object} packet\n * @api public\n */\n\nDecoder.prototype.add = function (obj) {\n  var packet;\n  if ('string' == typeof obj) {\n    packet = decodeString(obj);\n    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) {\n      // binary packet's json\n      this.reconstructor = new BinaryReconstructor(packet);\n\n      // no attachments, labeled binary but no binary data to follow\n      if (this.reconstructor.reconPack.attachments == 0) {\n        this.emit('decoded', packet);\n      }\n    } else {\n      // non-binary full packet\n      this.emit('decoded', packet);\n    }\n  } else if (isBuf(obj) || obj.base64) {\n    // raw binary data\n    if (!this.reconstructor) {\n      throw new Error('got binary data when not reconstructing a packet');\n    } else {\n      packet = this.reconstructor.takeBinaryData(obj);\n      if (packet) {\n        // received final buffer\n        this.reconstructor = null;\n        this.emit('decoded', packet);\n      }\n    }\n  } else {\n    throw new Error('Unknown type: ' + obj);\n  }\n};\n\n/**\n * Decode a packet String (JSON data)\n *\n * @param {String} str\n * @return {Object} packet\n * @api private\n */\n\nfunction decodeString(str) {\n  var p = {};\n  var i = 0;\n\n  // look up type\n  p.type = Number(str.charAt(0));\n  if (null == exports.types[p.type]) return error();\n\n  // look up attachments if type binary\n  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {\n    p.attachments = '';\n    while (str.charAt(++i) != '-') {\n      p.attachments += str.charAt(i);\n    }\n    p.attachments = Number(p.attachments);\n  }\n\n  // look up namespace (if any)\n  if ('/' == str.charAt(i + 1)) {\n    p.nsp = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (',' == c) break;\n      p.nsp += c;\n      if (i + 1 == str.length) break;\n    }\n  } else {\n    p.nsp = '/';\n  }\n\n  // look up id\n  var next = str.charAt(i + 1);\n  if ('' != next && Number(next) == next) {\n    p.id = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (null == c || Number(c) != c) {\n        --i;\n        break;\n      }\n      p.id += str.charAt(i);\n      if (i + 1 == str.length) break;\n    }\n    p.id = Number(p.id);\n  }\n\n  // look up json data\n  if (str.charAt(++i)) {\n    try {\n      p.data = json.parse(str.substr(i));\n    } catch (e) {\n      return error();\n    }\n  }\n  debug('decoded %s as %j', str, p);\n  return p;\n}\n\n/**\n * Deallocates a parser's resources\n *\n * @api public\n */\n\nDecoder.prototype.destroy = function () {\n  if (this.reconstructor) {\n    this.reconstructor.finishedReconstruction();\n  }\n};\n\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n * @api private\n */\n\nfunction BinaryReconstructor(packet) {\n  this.reconPack = packet;\n  this.buffers = [];\n}\n\n/**\n * Method to be called when binary data received from connection\n * after a BINARY_EVENT packet.\n *\n * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n * @return {null | Object} returns null if more binary data is expected or\n *   a reconstructed packet object if all buffers have been received.\n * @api private\n */\n\nBinaryReconstructor.prototype.takeBinaryData = function (binData) {\n  this.buffers.push(binData);\n  if (this.buffers.length == this.reconPack.attachments) {\n    // done with buffer list\n    this.reconPack.data['data'] = this.buffers.reduce(function (prev, curr, idx, arr) {\n      return this._appendBuffer(prev, curr);\n    }.bind(this));\n    binary.reconstructPacket(this.reconPack, [this.reconPack.data['data']]);\n    var packet = this.reconPack;\n    this.finishedReconstruction();\n    return packet;\n  }\n  return null;\n};\n\n/**\n * Cleans up binary packet reconstruction variables.\n *\n * @api private\n */\n\nBinaryReconstructor.prototype.finishedReconstruction = function () {\n  this.reconPack = null;\n  this.buffers = [];\n};\nfunction error(data) {\n  return {\n    type: exports.ERROR,\n    data: 'parser error'\n  };\n}\n\n/**\n * Reconstructs ArrayBuffer from chunks\n *\n * @api private\n */\n\nBinaryReconstructor.prototype._appendBuffer = function (curr, prev) {\n  var tmp = new Uint8Array(curr.byteLength + prev.byteLength);\n  tmp.set(new Uint8Array(curr), 0);\n  tmp.set(new Uint8Array(prev), curr.byteLength);\n  return tmp.buffer;\n};","map":{"version":3,"names":["debug","require","json","isArray","Emitter","binary","isBuf","exports","protocol","types","CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK","Encoder","Decoder","prototype","encode","obj","callback","type","encodeAsBinary","encoding","encodeAsString","str","nsp","attachments","id","data","stringify","writeEncoding","bloblessData","deconstruction","deconstructPacket","pack","packet","buffers","unshift","removeBlobs","reconstructor","add","decodeString","BinaryReconstructor","reconPack","emit","base64","Error","takeBinaryData","p","i","Number","charAt","error","c","length","next","parse","substr","e","destroy","finishedReconstruction","binData","push","reduce","prev","curr","idx","arr","_appendBuffer","bind","reconstructPacket","tmp","Uint8Array","byteLength","set","buffer"],"sources":["/home/xilxilx/projects/distsys/alias/frontend/node_modules/socket.io-p2p-parser/index.js"],"sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('socket.io-parser');\nvar json = require('json3');\nvar isArray = require('isarray');\nvar Emitter = require('component-emitter');\nvar binary = require('./binary');\nvar isBuf = require('./is-buffer');\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol = 4;\n\n/**\n * Packet types.\n *\n * @api public\n */\n\nexports.types = [\n  'CONNECT',\n  'DISCONNECT',\n  'EVENT',\n  'BINARY_EVENT',\n  'ACK',\n  'BINARY_ACK',\n  'ERROR'\n];\n\n/**\n * Packet type `connect`.\n *\n * @api public\n */\n\nexports.CONNECT = 0;\n\n/**\n * Packet type `disconnect`.\n *\n * @api public\n */\n\nexports.DISCONNECT = 1;\n\n/**\n * Packet type `event`.\n *\n * @api public\n */\n\nexports.EVENT = 2;\n\n/**\n * Packet type `ack`.\n *\n * @api public\n */\n\nexports.ACK = 3;\n\n/**\n * Packet type `error`.\n *\n * @api public\n */\n\nexports.ERROR = 4;\n\n/**\n * Packet type 'binary event'\n *\n * @api public\n */\n\nexports.BINARY_EVENT = 5;\n\n/**\n * Packet type `binary ack`. For acks with binary arguments.\n *\n * @api public\n */\n\nexports.BINARY_ACK = 6;\n\n/**\n * Encoder constructor.\n *\n * @api public\n */\n\nexports.Encoder = Encoder;\n\n/**\n * Decoder constructor.\n *\n * @api public\n */\n\nexports.Decoder = Decoder;\n\n/**\n * A socket.io Encoder instance\n *\n * @api public\n */\n\nfunction Encoder() {}\n\n/**\n * Encode a packet as a single string if non-binary, or as a\n * buffer sequence, depending on packet type.\n *\n * @param {Object} obj - packet object\n * @param {Function} callback - function to handle encodings (likely engine.write)\n * @return Calls callback with Array of encodings\n * @api public\n */\n\nEncoder.prototype.encode = function(obj, callback){\n  debug('encoding packet %j', obj);\n\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n    encodeAsBinary(obj, callback);\n  }\n  else {\n    var encoding = encodeAsString(obj);\n    callback([encoding]);\n  }\n};\n\n/**\n * Encode packet as string.\n *\n * @param {Object} packet\n * @return {String} encoded\n * @api private\n */\n\nfunction encodeAsString(obj) {\n  var str = '';\n  var nsp = false;\n\n  // first is type\n  str += obj.type;\n\n  // attachments if we have them\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n    str += obj.attachments;\n    str += '-';\n  }\n\n  // if we have a namespace other than `/`\n  // we append it followed by a comma `,`\n  if (obj.nsp && '/' != obj.nsp) {\n    nsp = true;\n    str += obj.nsp;\n  }\n\n  // immediately followed by the id\n  if (null != obj.id) {\n    if (nsp) {\n      str += ',';\n      nsp = false;\n    }\n    str += obj.id;\n  }\n\n  // json data\n  if (null != obj.data) {\n    if (nsp) str += ',';\n    str += json.stringify(obj.data);\n  }\n\n  debug('encoded %j as %s', obj, str);\n  return str;\n}\n\n/**\n * Encode packet as 'buffer sequence' by removing blobs, and\n * deconstructing packet into object with placeholders and\n * a list of buffers.\n *\n * @param {Object} packet\n * @return {Buffer} encoded\n * @api private\n */\n\nfunction encodeAsBinary(obj, callback) {\n\n  function writeEncoding(bloblessData) {\n    var deconstruction = binary.deconstructPacket(bloblessData);\n    var pack = encodeAsString(deconstruction.packet);\n    var buffers = deconstruction.buffers;\n\n    buffers.unshift(pack); // add packet info to beginning of data list\n    callback(buffers); // write all the buffers\n  }\n\n  binary.removeBlobs(obj, writeEncoding);\n}\n\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n * @api public\n */\n\nfunction Decoder() {\n  this.reconstructor = null;\n}\n\n/**\n * Mix in `Emitter` with Decoder.\n */\n\nEmitter(Decoder.prototype);\n\n/**\n * Decodes an ecoded packet string into packet JSON.\n *\n * @param {String} obj - encoded packet\n * @return {Object} packet\n * @api public\n */\n\nDecoder.prototype.add = function(obj) {\n  var packet;\n  if ('string' == typeof obj) {\n    packet = decodeString(obj);\n    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json\n      this.reconstructor = new BinaryReconstructor(packet);\n\n      // no attachments, labeled binary but no binary data to follow\n      if (this.reconstructor.reconPack.attachments == 0) {\n        this.emit('decoded', packet);\n      }\n    } else { // non-binary full packet\n      this.emit('decoded', packet);\n    }\n  }\n  else if (isBuf(obj) || obj.base64) { // raw binary data\n    if (!this.reconstructor) {\n      throw new Error('got binary data when not reconstructing a packet');\n    } else {\n      packet = this.reconstructor.takeBinaryData(obj);\n      if (packet) { // received final buffer\n        this.reconstructor = null;\n        this.emit('decoded', packet);\n      }\n    }\n  }\n  else {\n    throw new Error('Unknown type: ' + obj);\n  }\n};\n\n/**\n * Decode a packet String (JSON data)\n *\n * @param {String} str\n * @return {Object} packet\n * @api private\n */\n\nfunction decodeString(str) {\n  var p = {};\n  var i = 0;\n\n  // look up type\n  p.type = Number(str.charAt(0));\n  if (null == exports.types[p.type]) return error();\n\n  // look up attachments if type binary\n  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {\n    p.attachments = '';\n    while (str.charAt(++i) != '-') {\n      p.attachments += str.charAt(i);\n    }\n    p.attachments = Number(p.attachments);\n  }\n\n  // look up namespace (if any)\n  if ('/' == str.charAt(i + 1)) {\n    p.nsp = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (',' == c) break;\n      p.nsp += c;\n      if (i + 1 == str.length) break;\n    }\n  } else {\n    p.nsp = '/';\n  }\n\n  // look up id\n  var next = str.charAt(i + 1);\n  if ('' != next && Number(next) == next) {\n    p.id = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (null == c || Number(c) != c) {\n        --i;\n        break;\n      }\n      p.id += str.charAt(i);\n      if (i + 1 == str.length) break;\n    }\n    p.id = Number(p.id);\n  }\n\n  // look up json data\n  if (str.charAt(++i)) {\n    try {\n      p.data = json.parse(str.substr(i));\n    } catch(e){\n      return error();\n    }\n  }\n\n  debug('decoded %s as %j', str, p);\n  return p;\n}\n\n/**\n * Deallocates a parser's resources\n *\n * @api public\n */\n\nDecoder.prototype.destroy = function() {\n  if (this.reconstructor) {\n    this.reconstructor.finishedReconstruction();\n  }\n};\n\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n * @api private\n */\n\nfunction BinaryReconstructor(packet) {\n  this.reconPack = packet;\n  this.buffers = [];\n}\n\n/**\n * Method to be called when binary data received from connection\n * after a BINARY_EVENT packet.\n *\n * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n * @return {null | Object} returns null if more binary data is expected or\n *   a reconstructed packet object if all buffers have been received.\n * @api private\n */\n\nBinaryReconstructor.prototype.takeBinaryData = function(binData) {\n  this.buffers.push(binData);\n  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list\n    this.reconPack.data['data'] = this.buffers.reduce(function(prev, curr, idx, arr) {\n      return this._appendBuffer(prev, curr);\n    }.bind(this))\n    binary.reconstructPacket(this.reconPack, [this.reconPack.data['data']]);\n    var packet = this.reconPack\n    this.finishedReconstruction();\n    return packet;\n  }\n  return null;\n\n};\n\n/**\n * Cleans up binary packet reconstruction variables.\n *\n * @api private\n */\n\nBinaryReconstructor.prototype.finishedReconstruction = function() {\n  this.reconPack = null;\n  this.buffers = [];\n};\n\nfunction error(data){\n  return {\n    type: exports.ERROR,\n    data: 'parser error'\n  };\n}\n\n/**\n * Reconstructs ArrayBuffer from chunks\n *\n * @api private\n */\n\nBinaryReconstructor.prototype._appendBuffer = function(curr, prev) {\n  var tmp = new Uint8Array(curr.byteLength + prev.byteLength);\n  tmp.set(new Uint8Array(curr), 0);\n  tmp.set(new Uint8Array(prev), curr.byteLength);\n  return tmp.buffer;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}