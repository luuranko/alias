{"ast":null,"code":"var _jsxFileName = \"/home/xilxilx/projects/distsys/alias/frontend/src/App.js\",\n  _this = this;\n// import { useState } from 'react';\nimport React, { Component } from 'react';\nimport './App.css';\n// import Frontpage from './components/Frontpage';\n// import Lobby from './components/Lobby';\nimport ChatBox from './Chatbox';\nimport socketIO from \"socket.io-client\";\n// P2P STUFF:\n//import p2p from \"socket.io-p2p\"\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = socketIO.connect(\"http://localhost:4000\");\nconst p2psocket = socket;\n// P2P STUFF:\n// const p2psocket = new p2p(socket, {autoUpgrade: false})\n\n/*\nconst App = () => {\n  const [currentPage, setCurrentPage] = useState('frontpage')\n\n  const [roomName, setRoomName] = useState('')\n  const [roomNameInput, setRoomNameInput] = useState('')\n\n  console.log(roomName)\n  function handleRoomNameInputChange(event) {\n    setRoomNameInput(event.target.value)\n  }\n\n  */\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatLog: []\n    };\n  }\n  render() {\n    const {\n      chatLog\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ChatBox, {\n        chatLog: chatLog,\n        onSend: msg => msg && addChat(socket.id, msg)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goP2P,\n        children: \"GO P2P\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this);\n  }\n}\np2psocket.on('message', function (message) {\n  addChat(message, 'someone');\n});\nconst goP2P = () => {\n  console.log('going private');\n  /* P2P STUFF\n    p2psocket.emit('go-private', true)\n    p2psocket.upgrade()\n  */\n};\n\nconst addChat = function (name, message) {\n  let alert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  _this.setState({\n    chatLog: _this.state.chatLog.concat({\n      name,\n      message: `${message}`,\n      timestamp: `${Date.now()}`,\n      alert\n    })\n  });\n  p2psocket.socket.emit('message', message);\n};\n\n/*\n// if no room name known yet, sets the room name and joins the room\n// if room name has been set,\n// then checks if the user entered the correct room name\n// and joins the room if correct. otherwise annoying alert\nfunction handleJoinBtnPress() {\n  if (roomName === '') {\n    if (roomNameInput.trim().length > 0) {\n      setRoomName(roomNameInput)\n      joinRoom()\n    } else {\n      console.log('Empty input')\n    }\n  } else if (roomNameInput === roomName) {\n    joinRoom()\n  } else {\n    alert('Incorrect room name')\n  }\n}\n function joinRoom() {\n  setCurrentPage('lobby')\n  console.log('you have joined the room ', roomName)\n}\n function returnToFrontpage() {\n  setCurrentPage('frontpage')\n  console.log('you have exited the room ', roomName)\n}\n if (currentPage==='frontpage') {\n  return (\n    <div className='App'>\n      <p className='spin'>Alias :3</p>\n      <Frontpage\n        handleJoinBtnPress={handleJoinBtnPress}\n        handleRoomNameInputChange={handleRoomNameInputChange}\n      />\n      <div>Room: {roomName}</div>\n    </div>\n  )\n} else if (currentPage === 'lobby') {\n  return (\n    <div className='App'>\n      <p className='spin'>Alias :3</p>\n      <Lobby\n        roomName={roomName}\n        returnToFrontpage={returnToFrontpage}\n      />\n      <div>Room: {roomName}</div>\n    </div>\n  )\n} else {\n  return (\n    <div className='App'>\n      <p className='spin'>Alias :3</p>\n      <p className='funy'>I don't know where you are</p>\n      <div>Room: {roomName}</div>\n    </div>\n  )\n}\n}\n*/\nexport default App;","map":{"version":3,"names":["React","Component","ChatBox","socketIO","socket","connect","p2psocket","App","constructor","props","state","chatLog","render","msg","addChat","id","goP2P","on","message","console","log","name","alert","setState","concat","timestamp","Date","now","emit"],"sources":["/home/xilxilx/projects/distsys/alias/frontend/src/App.js"],"sourcesContent":["// import { useState } from 'react';\nimport React, { Component } from 'react';\nimport './App.css';\n// import Frontpage from './components/Frontpage';\n// import Lobby from './components/Lobby';\nimport ChatBox from './Chatbox';\n\nimport socketIO from \"socket.io-client\"\n// P2P STUFF:\n//import p2p from \"socket.io-p2p\"\n\nconst socket = socketIO.connect(\"http://localhost:4000\")\nconst p2psocket = socket\n// P2P STUFF:\n// const p2psocket = new p2p(socket, {autoUpgrade: false})\n\n/*\nconst App = () => {\n  const [currentPage, setCurrentPage] = useState('frontpage')\n\n  const [roomName, setRoomName] = useState('')\n  const [roomNameInput, setRoomNameInput] = useState('')\n\n  console.log(roomName)\n  function handleRoomNameInputChange(event) {\n    setRoomNameInput(event.target.value)\n  }\n\n  */\n\n  class App extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        chatLog: []\n      }\n    }\n    \n    render() {\n      const { chatLog } = this.state;\n      return (\n        <div className=\"App\">\n          <ChatBox\n            chatLog={chatLog}\n            onSend={(msg) => msg && addChat(socket.id, msg)}\n          />\n         <button onClick={goP2P}>GO P2P</button> \n        </div>\n      );\n    }\n  }\n\n  p2psocket.on('message', function(message) {\n    addChat(message, 'someone')\n  });\n\n  const goP2P = () => {\n    console.log('going private')\n  /* P2P STUFF\n    p2psocket.emit('go-private', true)\n    p2psocket.upgrade()\n  */\n  }\n\n\n  const addChat = (name, message, alert = false) => {\n    this.setState({ chatLog: this.state.chatLog.concat({\n      name,\n      message: `${message}`,\n      timestamp: `${Date.now()}`,\n      alert\n    })});\n    p2psocket.socket.emit('message', message)\n  }\n\n\n\n  /*\n  // if no room name known yet, sets the room name and joins the room\n  // if room name has been set,\n  // then checks if the user entered the correct room name\n  // and joins the room if correct. otherwise annoying alert\n  function handleJoinBtnPress() {\n    if (roomName === '') {\n      if (roomNameInput.trim().length > 0) {\n        setRoomName(roomNameInput)\n        joinRoom()\n      } else {\n        console.log('Empty input')\n      }\n    } else if (roomNameInput === roomName) {\n      joinRoom()\n    } else {\n      alert('Incorrect room name')\n    }\n  }\n\n  function joinRoom() {\n    setCurrentPage('lobby')\n    console.log('you have joined the room ', roomName)\n  }\n\n  function returnToFrontpage() {\n    setCurrentPage('frontpage')\n    console.log('you have exited the room ', roomName)\n  }\n\n  if (currentPage==='frontpage') {\n    return (\n      <div className='App'>\n        <p className='spin'>Alias :3</p>\n        <Frontpage\n          handleJoinBtnPress={handleJoinBtnPress}\n          handleRoomNameInputChange={handleRoomNameInputChange}\n        />\n        <div>Room: {roomName}</div>\n      </div>\n    )\n  } else if (currentPage === 'lobby') {\n    return (\n      <div className='App'>\n        <p className='spin'>Alias :3</p>\n        <Lobby\n          roomName={roomName}\n          returnToFrontpage={returnToFrontpage}\n        />\n        <div>Room: {roomName}</div>\n      </div>\n    )\n  } else {\n    return (\n      <div className='App'>\n        <p className='spin'>Alias :3</p>\n        <p className='funy'>I don't know where you are</p>\n        <div>Room: {roomName}</div>\n      </div>\n    )\n  }\n\n}\n*/\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,WAAW;AAClB;AACA;AACA,OAAOC,OAAO,MAAM,WAAW;AAE/B,OAAOC,QAAQ,MAAM,kBAAkB;AACvC;AACA;AAAA;AAEA,MAAMC,MAAM,GAAGD,QAAQ,CAACE,OAAO,CAAC,uBAAuB,CAAC;AACxD,MAAMC,SAAS,GAAGF,MAAM;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,MAAMG,GAAG,SAASN,SAAS,CAAC;EAC1BO,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACXC,OAAO,EAAE;IACX,CAAC;EACH;EAEAC,MAAM,GAAG;IACP,MAAM;MAAED;IAAQ,CAAC,GAAG,IAAI,CAACD,KAAK;IAC9B,oBACE;MAAK,SAAS,EAAC,KAAK;MAAA,wBAClB,QAAC,OAAO;QACN,OAAO,EAAEC,OAAQ;QACjB,MAAM,EAAGE,GAAG,IAAKA,GAAG,IAAIC,OAAO,CAACV,MAAM,CAACW,EAAE,EAAEF,GAAG;MAAE;QAAA;QAAA;QAAA;MAAA,QAChD,eACH;QAAQ,OAAO,EAAEG,KAAM;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB;IAAA;MAAA;MAAA;MAAA;IAAA,QAClC;EAEV;AACF;AAEAV,SAAS,CAACW,EAAE,CAAC,SAAS,EAAE,UAASC,OAAO,EAAE;EACxCJ,OAAO,CAACI,OAAO,EAAE,SAAS,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAMF,KAAK,GAAG,MAAM;EAClBG,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAC9B;AACF;AACA;AACA;AACE,CAAC;;AAGD,MAAMN,OAAO,GAAG,UAACO,IAAI,EAAEH,OAAO,EAAoB;EAAA,IAAlBI,KAAK,uEAAG,KAAK;EAC3C,KAAI,CAACC,QAAQ,CAAC;IAAEZ,OAAO,EAAE,KAAI,CAACD,KAAK,CAACC,OAAO,CAACa,MAAM,CAAC;MACjDH,IAAI;MACJH,OAAO,EAAG,GAAEA,OAAQ,EAAC;MACrBO,SAAS,EAAG,GAAEC,IAAI,CAACC,GAAG,EAAG,EAAC;MAC1BL;IACF,CAAC;EAAC,CAAC,CAAC;EACJhB,SAAS,CAACF,MAAM,CAACwB,IAAI,CAAC,SAAS,EAAEV,OAAO,CAAC;AAC3C,CAAC;;AAID;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,eAAeX,GAAG"},"metadata":{},"sourceType":"module"}