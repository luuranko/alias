{"ast":null,"code":"var _jsxFileName = \"/home/xilxilx/projects/distsys/alias/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// import { useState } from 'react';\nimport React, { useState } from 'react';\nimport './App.css';\n// import Frontpage from './components/Frontpage';\n// import Lobby from './components/Lobby';\nimport ChatBox from './Chatbox';\nimport socketIO from \"socket.io-client\";\n// P2P STUFF:\n//import p2p from \"socket.io-p2p\"\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = socketIO.connect(\"http://localhost:4000\");\nconst p2psocket = socket;\n// P2P STUFF:\n// const p2psocket = new p2p(socket, {autoUpgrade: false})\n\n/*\nconst App = () => {\n  const [currentPage, setCurrentPage] = useState('frontpage')\n\n  const [roomName, setRoomName] = useState('')\n  const [roomNameInput, setRoomNameInput] = useState('')\n\n  console.log(roomName)\n  function handleRoomNameInputChange(event) {\n    setRoomNameInput(event.target.value)\n  }\n\n  */\n\nconst App = () => {\n  _s();\n  const [chatLog, setChatLog] = useState([]);\n  const addChat = function (name, message) {\n    let alert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    console.log('about to add to chat:', name, message);\n    if (name !== 'someone') {\n      console.log('this message was sent by myself. sharing my message to server.');\n      p2psocket.emit('message', message);\n    }\n    const newMsg = {\n      name,\n      message: message,\n      timestamp: Date.now()\n    };\n    setChatLog(chatLog.concat(newMsg));\n    /*\n     this.setState({ chatLog: this.state.chatLog.concat({\n       name,\n       message: `${message}`,\n       timestamp: `${Date.now()}`,\n       alert\n     })});\n     */\n  };\n  /* \n   const addToChat = (data) => {\n     this.addChat(data, 'someone')\n   }\n   */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ChatBox, {\n      chatLog: chatLog,\n      onSend: msg => msg && addChat(p2psocket.id, msg)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goP2P,\n      children: \"GO P2P\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this);\n};\n_s(App, \"RI9RDyFVl2GmHjK6JLjsXVZN9lQ=\");\n_c = App;\np2psocket.on('message', function (data) {\n  console.log('a message was detected:', data);\n  //    App.addToChat(data)\n  App.addChat('someone', data);\n});\nconst goP2P = () => {\n  console.log('going private');\n  /* P2P STUFF\n    p2psocket.emit('go-private', true)\n    p2psocket.upgrade()\n  */\n};\n\n/*\n// if no room name known yet, sets the room name and joins the room\n// if room name has been set,\n// then checks if the user entered the correct room name\n// and joins the room if correct. otherwise annoying alert\nfunction handleJoinBtnPress() {\n  if (roomName === '') {\n    if (roomNameInput.trim().length > 0) {\n      setRoomName(roomNameInput)\n      joinRoom()\n    } else {\n      console.log('Empty input')\n    }\n  } else if (roomNameInput === roomName) {\n    joinRoom()\n  } else {\n    alert('Incorrect room name')\n  }\n}\n function joinRoom() {\n  setCurrentPage('lobby')\n  console.log('you have joined the room ', roomName)\n}\n function returnToFrontpage() {\n  setCurrentPage('frontpage')\n  console.log('you have exited the room ', roomName)\n}\n if (currentPage==='frontpage') {\n  return (\n    <div className='App'>\n      <p className='spin'>Alias :3</p>\n      <Frontpage\n        handleJoinBtnPress={handleJoinBtnPress}\n        handleRoomNameInputChange={handleRoomNameInputChange}\n      />\n      <div>Room: {roomName}</div>\n    </div>\n  )\n} else if (currentPage === 'lobby') {\n  return (\n    <div className='App'>\n      <p className='spin'>Alias :3</p>\n      <Lobby\n        roomName={roomName}\n        returnToFrontpage={returnToFrontpage}\n      />\n      <div>Room: {roomName}</div>\n    </div>\n  )\n} else {\n  return (\n    <div className='App'>\n      <p className='spin'>Alias :3</p>\n      <p className='funy'>I don't know where you are</p>\n      <div>Room: {roomName}</div>\n    </div>\n  )\n}\n}\n*/\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ChatBox","socketIO","socket","connect","p2psocket","App","chatLog","setChatLog","addChat","name","message","alert","console","log","emit","newMsg","timestamp","Date","now","concat","msg","id","goP2P","on","data"],"sources":["/home/xilxilx/projects/distsys/alias/frontend/src/App.js"],"sourcesContent":["// import { useState } from 'react';\nimport React, { useState } from 'react';\nimport './App.css';\n// import Frontpage from './components/Frontpage';\n// import Lobby from './components/Lobby';\nimport ChatBox from './Chatbox';\n\nimport socketIO from \"socket.io-client\"\n// P2P STUFF:\n//import p2p from \"socket.io-p2p\"\n\nconst socket = socketIO.connect(\"http://localhost:4000\")\nconst p2psocket = socket\n// P2P STUFF:\n// const p2psocket = new p2p(socket, {autoUpgrade: false})\n\n/*\nconst App = () => {\n  const [currentPage, setCurrentPage] = useState('frontpage')\n\n  const [roomName, setRoomName] = useState('')\n  const [roomNameInput, setRoomNameInput] = useState('')\n\n  console.log(roomName)\n  function handleRoomNameInputChange(event) {\n    setRoomNameInput(event.target.value)\n  }\n\n  */\n\n  const App = () => {\n    const [chatLog, setChatLog] = useState([])\n\n    const addChat = (name, message, alert = false) => {\n      console.log('about to add to chat:', name, message)\n      \n      if (name !== 'someone') {\n        console.log('this message was sent by myself. sharing my message to server.')\n        p2psocket.emit('message', message)\n      }\n\n      const newMsg = {\n        name, \n        message: message, \n        timestamp: Date.now()\n      }\n      setChatLog(chatLog.concat(newMsg))\n     /*\n      this.setState({ chatLog: this.state.chatLog.concat({\n        name,\n        message: `${message}`,\n        timestamp: `${Date.now()}`,\n        alert\n      })});\n      */\n    }\n   /* \n    const addToChat = (data) => {\n      this.addChat(data, 'someone')\n    }\n    */\n    return (\n      <div className=\"App\">\n        <ChatBox\n          chatLog={chatLog}\n          onSend={(msg) => msg && addChat(p2psocket.id, msg)}\n        />\n      <button onClick={goP2P}>GO P2P</button> \n    </div>\n    );}\n\n  p2psocket.on('message', function(data) {\n    console.log('a message was detected:', data)\n//    App.addToChat(data)\n    App.addChat('someone', data)\n  });\n\n  const goP2P = () => {\n    console.log('going private')\n  /* P2P STUFF\n    p2psocket.emit('go-private', true)\n    p2psocket.upgrade()\n  */\n  }\n\n\n\n\n\n  /*\n  // if no room name known yet, sets the room name and joins the room\n  // if room name has been set,\n  // then checks if the user entered the correct room name\n  // and joins the room if correct. otherwise annoying alert\n  function handleJoinBtnPress() {\n    if (roomName === '') {\n      if (roomNameInput.trim().length > 0) {\n        setRoomName(roomNameInput)\n        joinRoom()\n      } else {\n        console.log('Empty input')\n      }\n    } else if (roomNameInput === roomName) {\n      joinRoom()\n    } else {\n      alert('Incorrect room name')\n    }\n  }\n\n  function joinRoom() {\n    setCurrentPage('lobby')\n    console.log('you have joined the room ', roomName)\n  }\n\n  function returnToFrontpage() {\n    setCurrentPage('frontpage')\n    console.log('you have exited the room ', roomName)\n  }\n\n  if (currentPage==='frontpage') {\n    return (\n      <div className='App'>\n        <p className='spin'>Alias :3</p>\n        <Frontpage\n          handleJoinBtnPress={handleJoinBtnPress}\n          handleRoomNameInputChange={handleRoomNameInputChange}\n        />\n        <div>Room: {roomName}</div>\n      </div>\n    )\n  } else if (currentPage === 'lobby') {\n    return (\n      <div className='App'>\n        <p className='spin'>Alias :3</p>\n        <Lobby\n          roomName={roomName}\n          returnToFrontpage={returnToFrontpage}\n        />\n        <div>Room: {roomName}</div>\n      </div>\n    )\n  } else {\n    return (\n      <div className='App'>\n        <p className='spin'>Alias :3</p>\n        <p className='funy'>I don't know where you are</p>\n        <div>Room: {roomName}</div>\n      </div>\n    )\n  }\n\n}\n*/\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB;AACA;AACA,OAAOC,OAAO,MAAM,WAAW;AAE/B,OAAOC,QAAQ,MAAM,kBAAkB;AACvC;AACA;AAAA;AAEA,MAAMC,MAAM,GAAGD,QAAQ,CAACE,OAAO,CAAC,uBAAuB,CAAC;AACxD,MAAMC,SAAS,GAAGF,MAAM;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,MAAMG,GAAG,GAAG,MAAM;EAAA;EAChB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMS,OAAO,GAAG,UAACC,IAAI,EAAEC,OAAO,EAAoB;IAAA,IAAlBC,KAAK,uEAAG,KAAK;IAC3CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEJ,IAAI,EAAEC,OAAO,CAAC;IAEnD,IAAID,IAAI,KAAK,SAAS,EAAE;MACtBG,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;MAC7ET,SAAS,CAACU,IAAI,CAAC,SAAS,EAAEJ,OAAO,CAAC;IACpC;IAEA,MAAMK,MAAM,GAAG;MACbN,IAAI;MACJC,OAAO,EAAEA,OAAO;MAChBM,SAAS,EAAEC,IAAI,CAACC,GAAG;IACrB,CAAC;IACDX,UAAU,CAACD,OAAO,CAACa,MAAM,CAACJ,MAAM,CAAC,CAAC;IACnC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC;EACF;AACH;AACA;AACA;AACA;EACI,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB,QAAC,OAAO;MACN,OAAO,EAAET,OAAQ;MACjB,MAAM,EAAGc,GAAG,IAAKA,GAAG,IAAIZ,OAAO,CAACJ,SAAS,CAACiB,EAAE,EAAED,GAAG;IAAE;MAAA;MAAA;MAAA;IAAA,QACnD,eACJ;MAAQ,OAAO,EAAEE,KAAM;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgB;EAAA;IAAA;IAAA;IAAA;EAAA,QACnC;AACJ,CAAC;AAAA,GAvCCjB,GAAG;AAAA,KAAHA,GAAG;AAyCTD,SAAS,CAACmB,EAAE,CAAC,SAAS,EAAE,UAASC,IAAI,EAAE;EACrCZ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEW,IAAI,CAAC;EAChD;EACInB,GAAG,CAACG,OAAO,CAAC,SAAS,EAAEgB,IAAI,CAAC;AAC9B,CAAC,CAAC;AAEF,MAAMF,KAAK,GAAG,MAAM;EAClBV,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAC9B;AACF;AACA;AACA;AACE,CAAC;;AAMD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,eAAeR,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}